<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.itwillbs.project_movie.mapper.MyPageMapper">
<!-- 1. 예매내역 글 전체 가져오기 -->
	<select id="selectReservationListCount" resultType="int">
		SELECT COUNT(*)
		FROM payment JOIN schedule 
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE member_id = #{id}
		AND payment.payment_status = 1
		AND schedule.end_time &gt; now()
		ORDER BY 
			 start_time DESC
	</select>
<!-- 	예매내역 글 시작번호 끝번호 -->
	<select id="selectReservationList" resultType="map">
		SELECT payment.payment_code, payment.ticket_count, payment.total_payment, payment.total_seat_code, movie.movie_name, schedule.theater_code, schedule.start_time
		FROM payment JOIN schedule 
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE member_id = #{id}
		AND payment.payment_status = 1
		AND schedule.end_time &gt; now()
		ORDER BY 
		 	start_time DESC
 		LIMIT 
 			#{startRow}
 			,#{listLimit}
	</select>
<!-- 	예매내역 상세보기 -->
	<select id="selectReservationInfo" resultType="map">
		SELECT payment.payment_code, payment.ticket_count, payment.payment_date, payment.total_amount, payment.total_seat_code, movie.movie_name, schedule.theater_code, schedule.start_time
		FROM payment JOIN schedule 
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE payment_code = #{payment_code}
	</select>
	
<!-- 	예매취소 글 개수 -->
	<select id="selectReservationCancelCount" resultType="int">  
		SELECT COUNT(*)
		FROM refund JOIN payment
		ON refund.payment_code = payment.payment_code
		JOIN schedule
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE member_id = #{id}
		ORDER BY 
 			start_time DESC
	</select>
<!-- 	예매취소 글 시작번호 끝번호 -->
	<select id="selectReservationCancel" resultType="map">
		SELECT refund.refund_status, refund.refund_completed_date, refund.refund_amount, payment.ticket_count, schedule.start_time, movie.movie_name
		FROM refund JOIN payment
		ON refund.payment_code = payment.payment_code
		JOIN schedule
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE payment.member_id = #{id}
		ORDER BY 
		 	start_time DESC
	</select>
	
<!-- 	2.내가 본 영화 글 전체 가져오기 -->
	<select id="selectWathedMovieCount" resultType="int">
		SELECT COUNT(*)
		FROM movie
		JOIN schedule ON movie.movie_code = schedule.movie_code
		JOIN payment ON schedule.schedule_code = payment.schedule_code
	 		WHERE
				payment.member_id = #{id}
			AND
				schedule.end_time &lt; NOW()
			<if test="!searchYear.equals('')">
				AND 
		 			<choose>
		 				<when test="searchYear.equals('2025')">
				 			 start_time LIKE CONCAT('%', #{searchYear},'%')
		 				</when>
		 				<when test="searchYear.equals('2024')">
				 			 start_time LIKE CONCAT('%', #{searchYear},'%')
		 				</when>
		 				<when test="searchYear.equals('2023')">
				 			start_time LIKE CONCAT('%', #{searchYear},'%')
		 				</when>
		 				<when test="searchYear.equals('2022')">
				 			start_time LIKE CONCAT('%', #{searchYear},'%')
		 				</when>
		 				<when test="searchYear.equals('2021')">
				 			start_time LIKE CONCAT('%', #{searchYear},'%')
		 				</when>
		 				<otherwise>
		 					1=1
		 				</otherwise>
		 			</choose>
	 		</if>
	</select>
<!-- 	내가 본 영화 시작번호 끝번호 -->
	<select id="selectWatchedMovie" resultType="map">
	    SELECT movie.movie_code, movie.movie_name, 
	           MIN(schedule.start_time) AS start_time, 
	           SUM(payment.ticket_count) AS total_tickets
	    FROM movie
	    JOIN schedule ON movie.movie_code = schedule.movie_code
	    JOIN payment ON schedule.schedule_code = payment.schedule_code
	    WHERE payment.member_id = #{id}
	    AND schedule.end_time &lt; NOW()
	    <if test="!searchYear.equals('')">
	        AND start_time LIKE CONCAT('%', #{searchYear}, '%')
	    </if>
	    GROUP BY movie.movie_code, movie.movie_name
	    LIMIT #{startRow}, #{listLimit}
	</select>


<!-- 	리뷰 총 개수 출력 -->
	<select id="selectReviewListCount" resultType="int">
		SELECT COUNT(*)
		FROM review
		WHERE
		review_writer = #{id}
	</select>
<!-- 	리뷰 글 시작번호 끝번호 -->
	<select id="selectReviewList" resultType="map">
		SELECT movie.movie_name, review.review_content
		FROM review
		JOIN movie ON review.movie_code = movie.movie_code
		WHERE review_writer = #{id}
		LIMIT #{startRow}, #{listLimit}
	</select>
<!-- 	리뷰 글 보기 -->
	<select id="selectIsRegistReview" resultType="map">
		SELECT *
		FROM review
		WHERE movie_code = #{movie_code}
		AND review_writer = #{id}
	</select>
	<!-- 관람한 리뷰 작성 -->
	<insert id="insertReview">
		<selectKey keyProperty="review_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(review_code),0)
			FROM review;
		</selectKey>
		INSERT INTO review(
			movie_code,
			review_content,
			review_recommend,
			review_writer
		)VALUES(
			#{movieCode},
			#{reviewContent},
			#{reviewRecommend},
			#{id}
		)
	</insert>
<!-- 	관람한 영화 리뷰 수정 -->
	<update id="updateReview">
		UPDATE review
		SET review_content = #{review_content}, 	
		review_recommend = #{review_recommend}
		WHERE movie_code = #{movie_code}
	</update>
<!-- 	관람한 영화 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE FROM review
		WHERE movie_code = #{movie_code}
	</delete>
	
<!-- 	쿠폰 전체 조회 -->
	<select id="selectCouponListCount" resultType="int">
		SELECT COUNT(*)
		FROM coupon 
		WHERE member_id = #{id}
	</select>
<!-- 	쿠폰 시작번호 끝번호 -->
	<select id="selectCouponList" resultType="map">
		SELECT *
		FROM coupon
		WHERE member_id = #{id}
		ORDER BY coupon_status 
		LIMIT #{startRow}, #{listLimit}
	</select>
	
<!-- 	포인트 전체 조회 -->
	<select id="selectPointListCount" resultType="int">
		SELECT COUNT(*)
		FROM point po left JOIN payment pa ON po.payment_code = pa.payment_code
		LEFT JOIN refund re ON po.refund_code = re.refund_code
		LEFT JOIN event_board ev ON ev.event_code = po.event_code
		WHERE point_holder = #{id}
	</select>
<!-- 	포인트 시작번호 끝번호 -->
	<select id="selectPointList" resultType="map">
		SELECT po.point_credited, po.point_debited, po.point_holder, ev.event_subject, 
	      		pa.payment_code, po.regis_date, re.refund_code, po.point_code
		FROM point po 
		LEFT JOIN payment pa ON po.payment_code = pa.payment_code
		LEFT JOIN refund re ON po.refund_code = re.refund_code
		LEFT JOIN event_board ev ON ev.event_code = po.event_code
		WHERE point_holder = #{id}
		ORDER BY po.regis_date DESC
		LIMIT #{startRow}, #{listLimit}
	</select>
	
<!-- 1:1문의 글 전체 가져오기 -->
	<select id="selectInquiryListCount" resultType="int">
	    SELECT COUNT(*)
	    FROM Inquiry
	    WHERE 
	       inquiry_writer = #{id}
	        OR (
	          response_status = 2 
	          AND inquiry_re_ref IN (
	             SELECT inquiry_code
	             FROM Inquiry
	             WHERE inquiry_writer = #{id}
	          )
	        )
	    <if test="!searchKeyword.equals('')">
	        AND
	        <choose>
	            <when test="searchType.equals('subject')">
	                inquiry_subject LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType.equals('content')">
	                inquiry_content LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	        </choose>
	    </if>
	</select>
<!-- 	1:1문의 글 시작번호,끝번호 -->

	<select id="selectInquiryList" resultType="inquiry">
	    SELECT *
	    FROM Inquiry
	    WHERE 
	       inquiry_writer = #{id}
	        OR (
	          response_status = 2 
	          AND inquiry_re_ref IN (
	             SELECT inquiry_code
	             FROM Inquiry
	             WHERE inquiry_writer = #{id}
	          )
	        )
	    <if test="!searchKeyword.equals('')">
	        AND
	        <choose>
	            <when test="searchType.equals('subject')">
	                inquiry_subject LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType.equals('content')">
	                inquiry_content LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	        </choose>
	    </if>
 		ORDER BY
			inquiry_re_ref DESC
			, inquiry_re_seq ASC
 		LIMIT 
 			#{startRow}
 			,#{listLimit}
 	</select>
<!-- 	1:1문의 글 선택 -->
 	<select id="selectInquiry" resultType="inquiry">
 		SELECT *
 		FROM Inquiry
 		WHERE inquiry_code = #{inquiry_code}
 	</select>
<!-- 	1:1문의 글 작성-->
	<insert id="insertInquiry">
		<selectKey keyProperty="inquiry_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(inquiry_code), 0)
			FROM Inquiry
		</selectKey>
	    INSERT INTO Inquiry(
	    	inquiry_code,
	        inquiry_subject,
	        inquiry_writer,
	        inquiry_content,
	        inquriy_date,
	        inquiry_writer_ip,
	        inquiry_re_ref,
	        inquiry_re_lev,
	        inquiry_re_seq
	    )
	    VALUES(
	 	    #{inquiry_code} + 1,
	        #{inquiry_subject},
   	        #{inquiry_writer},
	        #{inquiry_content},
	        NOW(),
	        #{inquiry_writer_ip},
	        #{inquiry_code} + 1,
	        0,
	     	0
	    )
	</insert>
<!--  	1:1문의 글 수정  -->
 	<update id="updateInquiry">
 		UPDATE Inquiry
 		SET inquiry_subject = #{inquiry_subject}
 		, inquiry_content = #{inquiry_content}
		WHERE inquiry_code = #{inquiry_code}
 	</update>
<!--  	1:1문의 글 삭제 -->
	<delete id="deleteInquiry">
		DELETE FROM Inquiry
		WHERE inquiry_code = #{inquiry_code}
	</delete>
	
	<update id="updateMemberstatus">
		UPDATE member
		SET member_status = 2
		WHERE member_id = #{member_id}
	</update>
<!-- 	==========================여기서부터 관리자 페이지 ================================================ -->
<!-- 공지사항 글 개수 -->
	<select id="selectNoticeListCount" resultType="int">
		SELECT COUNT(*)
		FROM notice_board
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('subject')">
					notice_subject LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
				<when test="searchType.equals('content')">
					notice_content LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
			</choose>
		</if>
		ORDER BY notice_code DESC
	</select>
<!-- 	공지사항 시작번호 끝번호 -->
	<select id="selectNoticeList" resultType="notice_board">
		SELECT *
		FROM notice_board
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('subject')">
					notice_subject LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
				<when test="searchType.equals('content')">
					notice_content LIKE CONCAT('%',#{searchKeyword},'%')
				</when>
			</choose>
		</if>
		ORDER BY notice_code DESC
		LIMIT 
			#{startRow}
			,#{listLimit}
	</select>
<!-- 	공지사항 글 자세히보기 -->
	<select id="selectNotice" resultType="notice_board">
		SELECT *
		FROM notice_board
		WHERE notice_code = #{notice_board}
	</select>
<!-- 	공지사항 등록 -->
	<insert id="insertNoticeAdmin">
		INSERT INTO notice_board(
		notice_subject
		, notice_content
		, regis_date
		, notice_writer
		,notice_writer_ip
		) VALUES(
			#{notice_subject}
			,#{notice_content}
			,NOW()
			,#{notice_writer}
			,#{notice_writer_ip}
		)
	</insert>
<!-- 	공지사항 수정 -->
	<update id="updateNotice">
		UPDATE notice_board
		SET notice_subject = #{notice_subject}
		,notice_content = #{notice_content}
		WHERE notice_code = #{notice_code}
	</update>
<!-- 	공지사항 삭제 -->
	<delete id="deleteNotice">
		DELETE FROM notice_board
		WHERE notice_code = #{notice_code}
	</delete>
<!-- 	faq 글 개수 -->
	<select id="selectFaqListCount" resultType="int">
		SELECT COUNT(*)
		FROM faq_board 
		ORDER BY faq_code DESC
	</select>
<!-- 	faq 글 시작번호 끝번호 -->
	<select id="selectFaqList" resultType="faq_board">
		SELECT *
		FROM faq_board
		ORDER BY faq_code DESC
		LIMIT 
			#{startRow}
			,#{listLimit}
	</select>
<!-- 	FAQ 글 작성 -->
	<insert id="insertFaqAdmin">
		INSERT INTO faq_board(
		faq_subject
		,faq_content
		)VALUES(
			#{faq_subject}
			,#{faq_content}
		)
	</insert>
<!-- 	faq 글 자세히보기 -->
	<select id="selectFaq" resultType="faq_board">
		SELECT *
		FROM faq_board
		WHERE faq_code = #{faq_code}
	</select>
<!-- 	faq 글 수정 -->
	<update id="updateFaq">
		UPDATE faq_board
		SET faq_subject = #{faq_subject}
			, faq_content = #{faq_content}
		WHERE faq_code = #{faq_code}
	</update>
<!-- 	faq 글 삭제 -->
	<delete id="deleteFaq">
		DELETE 
		FROM faq_board
		WHERE faq_code = #{faq_code}
	</delete>
<!-- 	1:1문의 글 개수 -->
	<select id="selectAdminInquiryListCount" resultType="int">
		SELECT COUNT(*)
 		FROM Inquiry
 		<if test="!searchType.equals('')">
		    WHERE 
		    <choose>
		        <when test="searchType.equals('before')">
		            response_status = 0
		        </when>
		        <when test="searchType.equals('after')">
		            response_status = 1
		        </when>
		        <when test="searchType.equals('finish')">
		            response_status = 2
		        </when>
		    </choose>
		</if>
	</select>
<!-- 	1:1문의 시작번호 끝번호 = 목록 조회 -->
	<select id="selectAdminInquiryList" resultType="inquiry">
 		SELECT *
 		FROM Inquiry
 		<if test="!searchType.equals('')">
 			WHERE 
 			<choose>
 				<when test="searchType.equals('before')">
		 			response_status LIKE CONCAT('%', #{searchType},'%')
 				</when>
 				<when test="searchType.equals('after')">
		 			response_status LIKE CONCAT('%', #{searchType},'%')
 				</when>
 				<when test="searchType.equals('finish')">
		 			response_status LIKE CONCAT('%', #{searchType},'%')
 				</when>
 			</choose>
 		</if>
 		ORDER BY
			inquiry_re_ref DESC
			, inquiry_re_seq ASC
 		LIMIT 
 			#{startRow}
 			,#{listLimit}
 	</select>
<!-- 	1:1문의 수정 -->
	<update id="updateInquiryModify">
 		UPDATE Inquiry
 		SET inquiry_subject = #{inquiry_subject}
 		, inquiry_content = #{inquiry_content}
		WHERE inquiry_code = #{inquiry_code}
	</update>
<!-- 	1:1문의 삭제 -->
	<delete id="deleteInquiryAdmin">
		DELETE FROM Inquiry
		WHERE inquiry_code = #{inquiry_code}
	</delete>
<!-- 	1:1문의 답변 순서조정  -->
<!-- 참조글 번호가 원본 게시물의 참조글번호와 같고, -->
<!-- 순서번호가 대상 게시물의 순서번호보다 더 큰 레코드들의 순서번호를 1씩 증가 -->
	<update id="updateInquiryReSeq">
		UPDATE Inquiry
		SET inquiry_re_seq  = inquiry_re_seq + 1
		WHERE inquiry_re_ref = #{inquiry_re_ref}
			AND inquiry_re_seq > #{inquiry_re_seq}
	</update>
<!-- 	1:1문의 답변 등록  -->
	<insert id="insertInquiryReply">
		<selectKey keyProperty="inquiry_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(inquiry_code),0)
			FROM Inquiry;
		</selectKey>
		INSERT INTO Inquiry(
			inquiry_code
			,inquiry_subject
			,inquiry_content
			,inquriy_date
			,response_status
			,inquiry_writer_ip
			,inquiry_re_ref
			,inquiry_re_lev
			,inquiry_re_seq
		)
		VALUES(
			#{inquiry_code} + 1
			,#{inquiry_subject}
			,#{inquiry_content}
			,NOW()
			,2
			,#{inquiry_writer_ip}
			,#{inquiry_re_ref}
			,#{inquiry_re_lev} + 1
			,#{inquiry_re_seq} + 1
		)
	</insert>
<!-- 1:1문의 답변 삭제시 다시 답변 전으로 업데이트 -->
	<update id="updateInquiryCode">
		<selectKey keyProperty="inquiry_re_ref" resultType="int" order="BEFORE">
			SELECT inquiry_re_ref
			FROM Inquiry
			WHERE inquiry_code = #{inquiry_code}
		</selectKey>
		UPDATE Inquiry 
		SET response_status = 0
		WHERE inquiry_code = #{inquiry_re_ref}
	</update>

<!-- 	1:1문의 등록 시 답변 완료로 업데이트 -->
	<update id="updateInquiryCode2">
		UPDATE Inquiry
		SET response_status = 1
		WHERE inquiry_code = #{inquiry_code}
		AND response_status = 0
	</update>
	
	<select id="selectRefCount" resultType="int">
		SELECT count(*)
		FROM Inquiry
		WHERE inquiry_re_ref = (
								SELECT inquiry_re_ref
								FROM Inquiry
								WHERE inquiry_code = #{inquiry_code}
								)
		
	</select>
	
	<!-- 	이전글 다음글 -->
		<select id="">
			SELECT *
			FROM (
			   SELECT 
			      notice_code
			        , LAG(notice_code) 
			         OVER 
			            <choose>
			            <when test="board_type eq 'notice'">
			               (ORDER BY notice_code DESC) 
			            </when>
			                <when test="board_type eq 'free'">
			               (ORDER BY board_re_ref DESC, board_re_seq ASC) 
			            </when>
			            </choose>
			            AS next_notice_code
			        , LEAD(notice_code) OVER (ORDER BY notice_code DESC) AS prev_notice_code
			    FROM notice_board
			) AS subquery
			WHERE notice_code = 13;
		</select>
<!-- 	마이페이지 메인 예매내역 -->
	<select id="getReservationList">
		SELECT payment.payment_code, payment.ticket_count, payment.total_payment, payment.total_seat_code, movie.movie_name, schedule.theater_code, schedule.start_time
		FROM payment JOIN schedule 
		ON payment.schedule_code = schedule.schedule_code
		JOIN movie 
		ON schedule.movie_code = movie.movie_code
		WHERE member_id = #{id}
		AND payment.payment_status = 1
		AND schedule.end_time &gt; now()
		ORDER BY 
		 	start_time DESC
	</select>
<!-- 	마이페이지 메인 쿠폰 -->
	<select id="getCouponList" resultType="map">
		SELECT *
		FROM coupon
		WHERE member_id = #{id}
	</select>
<!-- 	마이페이지 메인 포인트 -->
	<select id="getPointList" resultType="map">
		SELECT po.point_credited, po.point_debited, po.point_holder, ev.event_subject, 
	      		pa.payment_code, po.regis_date, re.refund_code, po.point_code
		FROM point po 
		LEFT JOIN payment pa ON po.payment_code = pa.payment_code
		LEFT JOIN refund re ON po.refund_code = re.refund_code
		LEFT JOIN event_board ev ON ev.event_code = po.event_code
		WHERE point_holder = #{id}
		ORDER BY po.regis_date DESC
	</select>
	
<!-- 	마이페이지 메인 1:1문의 -->
	<select id="getInquiryList" resultType="inquiry">
	    SELECT *
	    FROM Inquiry
	    WHERE 
	       inquiry_writer = #{id}
	        OR (
	          response_status = 2 
	          AND inquiry_re_ref IN (
	             SELECT inquiry_code
	             FROM Inquiry
	             WHERE inquiry_writer = #{id}
	          )
	        )
 		ORDER BY
			inquiry_re_ref DESC
			, inquiry_re_seq ASC
 	</select>
 </mapper>